name: Deploy Repos A and B

# Workflow triggers
on:
  pull_request:
    types: 
      - labeled
    branches:
      - feature_version2
    paths-ignore:
      - "**/README.md"
      

jobs:
  deploycodeA:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from Repo A
        uses: actions/checkout@v2
        with:
          repository: kalpanauppara/regional_repo
          ref: ${{ github.event.ref }}
      
      # ... other steps to prepare Repo A code ...

      - name: Set output for test.sh
        id: set-output-test-sh
        run: echo "::set-output name=test::$(cat mycode/test.sh)"

  deploycodeB:
    runs-on: ubuntu-latest
    needs: deploycodeA
    steps:
      - name: Checkout code from Repo B
        uses: actions/checkout@v2
        with:
          repository: kalpanauppara/global_repo
          ref: Feature_branch

      # ... other steps to prepare Repo B code ...

      - name: Set output for test.py
        id: set-output-test-py
        run: echo "::set-output name=test::$(cat mysourcecode/test.py)"

  mergeAndDeploy:
    runs-on: ubuntu-latest
    needs:
      - deploycodeA
      - deploycodeB
    if: ((startswith(github.head_ref,'feature_version1')) && (github.event_name == 'pull_request') && (github.event.label.name == 'Ready for Deploy'))
    steps:
      - name: Create the content_deploy directory
        run: mkdir content_deploy

      - name: Copy test.sh from Repo A to content_deploy
        run: echo "${{ needs.deploycodeA.outputs.test }}" > content_deploy/test.sh

      - name: Copy test.py from Repo B to content_deploy
        run: echo "${{ needs.deploycodeB.outputs.test }}" > content_deploy/test.py

      - name: List contents of content_deploy
        run: ls -lrt content_deploy

  deploy-to-salesforce:  
    runs-on: ubuntu-latest
    needs:
      - mergeAndDeploy
    if: ((startswith(github.head_ref,'feature_version1')) && (github.event_name == 'pull_request') && (github.event.label.name == 'Ready for Deploy'))
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Install SFDX CLI
      run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx && ls -la
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          echo The PATH is $GITHUB_PATH
          ~/sfdx/bin/sfdx version
      
    - name: Install SFDX-Scanner
      run: sfdx plugins:install @salesforce/sfdx-scanner

    - name: Install SFDX-Git-Delta plugin
      run: |
        echo y | sfdx plugin:install sfdx-git-delta
        sfdx plugins

    - name: Authenticate with Salesforce
      run: |
        # Authenticate with Salesforce using the connected app credentials
        sfdx force:auth:jwt:grant -u ${{ secrets.SALESFORCE_DEVHUB_USERNAME }} -f ${{ secrets.SALESFORCE_JWT_SECRET_KEY }}  -i ${{ secrets.SALESFORCE_JWT_SECRET_KEY }} -s ${{ secrets.SALESFORCE_CONSUMER_KEY }}

    - name: Deploy to Salesforce
      run: |
        # Deploy to Salesforce
        sfdx force:source:deploy -p content_deploy/ -u ${{ secrets.SALESFORCE_DEVHUB_USERNAME }}
